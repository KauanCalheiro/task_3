services:
  postgres:
    # psql -hlocalhost -p5000 -Upostgres -dpostgres
    container_name: postgres
    restart: always
    build: 
      context: ./postgres
      dockerfile: Dockerfile
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5000:5432"
    expose:
      - 5432
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - task-3-network

  postgres-logs:
    # psql -hlocalhost -p5001 -Upostgres -dpostgres
    container_name: postgres-logs
    restart: always
    build: 
      context: ./postgres-logs
      dockerfile: Dockerfile
    environment:
      POSTGRES_DB: ${DB_LOG_DATABASE}
      POSTGRES_USER: ${DB_LOG_USERNAME}
      POSTGRES_PASSWORD: ${DB_LOG_PASSWORD}
    ports:
      - "5001:5432"
    expose:
      - 5432
    volumes:
      - ./postgres-logs/data:/var/lib/postgresql/data
      - ./postgres-logs/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - task-3-network

  php-auth:
    container_name: php-auth
    restart: always
    build:
      context: ./auth
      dockerfile: Dockerfile.dev
    depends_on:
      - postgres
      - php-log
    environment:
      DB_CONNECTION: ${DB_CONNECTION_LARAVEL}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      TRUST_KEY: ${TRUST_KEY}
    volumes:
      - ./auth:/var/www/html
    networks:
      - task-3-network
    expose:
      - 80

  php-user:
    container_name: php-user
    restart: always
    build:
      context: ./user
      dockerfile: Dockerfile.dev
    depends_on:
      - postgres
      - php-log
    environment:
      DB_CONNECTION: ${DB_CONNECTION_LARAVEL}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      TRUST_KEY: ${TRUST_KEY}
    volumes:
      - ./user:/var/www/html
    networks:
      - task-3-network
    expose:
      - 80

  php-sync:
    container_name: php-sync
    restart: always
    build:
      context: ./sync
      dockerfile: Dockerfile.dev
    depends_on:
      - postgres
      - php-log
    environment:
      DB_CONNECTION: ${DB_CONNECTION_LARAVEL}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      TRUST_KEY: ${TRUST_KEY}
    volumes:
      - ./sync:/var/www/html
    networks:
      - task-3-network
    expose:
      - 80

  # php-web:
  #   container_name: php-web
  #   restart: always
  #   build:
  #     context: ./application
  #     dockerfile: Dockerfile.dev
  #   environment:
  #     DB_CONNECTION: ${DB_CONNECTION_LARAVEL}
  #     DB_HOST: ${DB_HOST}
  #     DB_PORT: ${DB_PORT}
  #     DB_DATABASE: ${DB_DATABASE}
  #     DB_USERNAME: ${DB_USERNAME}
  #     DB_PASSWORD: ${DB_PASSWORD}
  #     TRUST_KEY: ${TRUST_KEY}
  #   volumes:
  #     - ./user:/var/www/html
  #   networks:
  #     - task-3-network
  #   expose:
  #     - 80
  #   ports:
  #     - "8080:80"

  php-certificate:
    container_name: php-certificate
    restart: always
    build:
      context: ./certificate
      dockerfile: Dockerfile.dev
    depends_on:
      - postgres
      - php-log
    environment:
      DB_CONNECTION: ${DB_CONNECTION_LARAVEL}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      TRUST_KEY: ${TRUST_KEY}
    volumes:
      - ./certificate:/var/www/html
    networks:
      - task-3-network
    expose:
      - 80

  php-log:
    container_name: php-log
    restart: always
    build:
      context: ./log
      dockerfile: Dockerfile.dev
    depends_on:
      - postgres-logs
    environment:
      DB_CONNECTION: ${DB_LOG_CONNECTION_LARAVEL}
      DB_HOST: ${DB_LOG_HOST}
      DB_PORT: ${DB_LOG_PORT}
      DB_DATABASE: ${DB_LOG_DATABASE}
      DB_USERNAME: ${DB_LOG_USERNAME}
      DB_PASSWORD: ${DB_LOG_PASSWORD}
      TRUST_KEY: ${TRUST_KEY}
    volumes:
      - ./log:/var/www/html
    networks:
      - task-3-network
    expose:
      - 80

  node-event:
    container_name: node-event
    restart: always
    build:
      context: ./event
      dockerfile: Dockerfile.dev
    depends_on:
      - postgres
      - php-log
    environment:
      DB_CONNECTION: ${DB_CONNECTION_EXPRESS}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      TRUST_KEY: ${TRUST_KEY}
    volumes:
      - ./event:/usr/src/app
    expose:
      - 3000
    networks:
      - task-3-network

  node-inscription:
    container_name: node-inscription
    restart: always
    build:
      context: ./inscription
      dockerfile: Dockerfile.dev
    depends_on:
      - postgres
      - php-log
    environment:
      DB_CONNECTION: ${DB_CONNECTION_EXPRESS}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      TRUST_KEY: ${TRUST_KEY}
    volumes:
      - ./inscription:/usr/src/app
    expose:
      - 3000
    networks:
      - task-3-network

  node-attendance:
    container_name: node-attendance
    restart: always
    build:
      context: ./attendance
      dockerfile: Dockerfile.dev
    depends_on:
      - postgres
      - php-log
    environment:
      DB_CONNECTION: ${DB_CONNECTION_EXPRESS}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      TRUST_KEY: ${TRUST_KEY}
    volumes:
      - ./attendance:/usr/src/app
    expose:
      - 3000
    networks:
      - task-3-network

  nginx:
    container_name: nginx
    restart: always
    build:
      context: ./nginx
      dockerfile: Dockerfile
    depends_on:
      - php-auth
      - php-user
      - node-event
      - node-inscription
      - node-attendance
    ports:
      - "80:80"
    volumes:
      - ./nginx/logs:/etc/nginx/logs
    networks:
      - task-3-network

networks:
  task-3-network:
    driver: bridge